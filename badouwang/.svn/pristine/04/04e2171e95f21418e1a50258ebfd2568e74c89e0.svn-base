<?php
// 用户控制器
class UserAction extends CommonAction {
    //注册
    public function regist(){
	$param=$this->getData(array('uname','password','user_pic','lab','rname','step','uid'), 'post');
        switch($param['step']){
            case 1:
                if($param['uname'] && $param['password']){
                    import('Com.Classfi');
                    $res=M('User')->add(array('uname'=>$param['uname'],'password'=>  PasswordHelper::advDecode($param['password']),'reg_timestamp'=>  time()));
                    $this->ajaxr($res, '', '',array('uid'=>$res));
                }else{
                    $this->errorkey($param,array('user_pic','lab','rname','uid'));
                }
                break;
            case 2:
                if($param('uid') && $param['user_pic']){
                    $res=M('Memberfields')->where("uid='$param[uid]'")->save(array('user_pic'=>$param['user_pic']));
                    $this->ajaxr($res,'设置头像成功','设置头像失败');
                }else{
                    $this->errorkey($param,array('uname','password','rname','lab'));
                }
                break;
            case 3:
                if($param('uid') && $param['lab'] && $param['rname']){
                    $res=M('Memberfields')->where("uid='$param[uid]'")->save(array('lab'=>$param['lab'],'rname'=>$param['rname']));
                     $this->ajaxr($res,'设置成功','设置失败');
                }else{
                    $this->errorkey($param,array('uname','password','user_pic','lab'));
                }
                break;
            default:
                $this->ajaxr(false, '', '请求步骤不正确');
        }
        
    }
    //登录
    public function login(){
        $data=$this->getData(array('uname','password'), 'post');
        if($data['uname'] && $data['password']){
            import("ComPasswordHelper");
            $password=  PasswordHelper::advDecode($data['password']);
            $user=M('User')->where("uname='$data[uname]' and password='$password'")->field('uname','password','uid','err_time')->find();
            if(count($user)){
                $code=  PasswordHelper::aencrypt($data['uname'], $data['uname']);
                $nickname=M('Memberfields')->where("uid='$user[uid]'")->field('rname')->find();
                $isfirst=date('Y-m-d',$user['err_time'])===date('Y-m-d',time())?1:0;
                if($isfirst){
                    import('Com.Config');
                    $isfirst=  Config::getConfig('经验','login');
                }
                $this->ajaxr(1,'', '',array('utoken'=>$code,'uname'=>$nickname['rname'],'isfirst'=>$isfirst));
            }else{
                $this->ajaxr(false, '', '用户名或密码为空！');
            }
        }else{
            $this->ajaxr(false, '', '用户名或密码为空！');
        }
    }
    //第三方登录绑定接口
    public function thirdLogin(){
        $data=$this->getData(array('uname','user_pic','rname','sex','city','password','type'), 'post');
        if($data['uname'] && $data['user_pic'] && $data['rname'] && $data['sex'] && $data['sex'] && $data['password']){
            import("Com.PasswordHelper");
            $bind=$data['type']==="1"?'q_bind':'w_bind';
            $uid=M('User')->add(array('uname'=>$data['uname'],'password'=>  PasswordHelper::advDecode($data['password']),
                'reg_timestamp'=>time(),$bind=>$data['user_pic']));
            if($uid){
                $res=M('Memberfields')->add(array('uid'=>$uid,'sex'=>$data['sex'],'rname'=>$data['rname'],'user_pic'=>$data['user_pic']));
                $this->ajaxr($res, '', '绑定账号失败！',array('uid'=>$uid,'sex'=>$data['sex'],'rname'=>$data['rname'],'user_pic'=>$data['user_pic']));
            }else{
                $this->ajaxr(false, '','绑定账号失败！');
            }
        }else{
            $this->errorkey($data);
        }
    }
    
    //找回密码
    public function chPassword(){
        $param=$this->getData(array('npwd,uid'), 'post');
        if($param['npwd'] && $param['uid']){
             import('Com.PasswordH');
             $res=M('User')->where("uid='$param[uid]'")->setField('password',  PasswordHelper::advDecode($param['npwd']));
             $this->ajaxr($res, '找回密码成功','找回密码失败');
        }else{
            $this->errorkey($param);
        }
       
    }
    //重置密码
    public function rePassword(){
        $param=$this->getData(array('opwd','npwd','uid'), 'post');
        if($param['uid'] && $param['opwd'] && $param['npwd']){
            if($param['opwd']===$param['npwd']){
                $this->ajaxr(false, '', '新旧密码一致');exit;
            }
            import('Com.PasswordHelper');
            $pass=  PasswordHelper::advDecode($param['opwd']);
            if(M('User')->where("uid='$param[uid]' and password='$pass'")->find()){
                $res=M('User')->where("uid='$param[uid]' and password='$pass'")->setField('password',  PasswordHelper::advDecode($param['npwd']));
                $this->ajaxr($res, '修改密码成功','修改密码失败');
            }else{
                 $this->ajaxr(false, '', '旧密码不正确');exit;
            }
        }else{
            $this->errorkey($param);
        }
        
    }
    //个人设置
    public function uset(){
        $param=$this->getData(array('rname','tname','sex','birth','email','qq','telephone','birth'),'post');
        $res=M('Memberfieds')->save($param);
        $this->ajaxr($res, '修改信息成功', '信息未修改');
    }
    //获取token
    public function getCode(){
        $type=$this->getData(array('type'),'get');
        if(!$type['type']){
            echo json_encode(array('code'=>0,'message'=>'参数type不存在'));exit;
        }
        $code=  md5($type['type'].time());
        $res=M('Client')->add(array('type'=>$type['type'],'code'=>$code,'atime'=>time()));
        $this->ajaxr($res, '获取token成功','',array('code'=>1,'token'=>$code));
    }
    //身份认证
    public function verify(){
        $param=$this->getData(array('type','real_name','telephone','grade','fid','gid','city','district',
            'address','self_info','info','school','id_img','c_url','dymess','invite'),'post');
        switch($param['type']){
            case '':
                break;
            case '':
                break;
            case '':
                break;
        }
    }
    
}